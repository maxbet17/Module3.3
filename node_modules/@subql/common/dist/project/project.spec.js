"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const load_1 = require("./load");
const projectsDir = path_1.default.join(__dirname, '../../test');
function loadFromFile(file) {
    let filePath = file;
    if (fs_1.default.existsSync(file) && fs_1.default.lstatSync(file).isDirectory()) {
        filePath = path_1.default.join(file, 'project.yaml');
    }
    return (0, load_1.loadFromJsonOrYaml)(filePath);
}
describe('project.yaml', () => {
    it('can parse project.yaml to ProjectManifestImpl', async () => {
        const raw = await loadFromFile(path_1.default.join(projectsDir, 'project.yaml'));
        const project = (0, load_1.parseProjectManifest)(raw);
        expect(project).toBeTruthy();
    });
    it('can validate project.yaml', async () => {
        const raw0 = await loadFromFile(path_1.default.join(projectsDir, 'project_falsy.yaml'));
        const raw1 = await loadFromFile(path_1.default.join(projectsDir, 'project_falsy_array.yaml'));
        expect(() => (0, load_1.parseProjectManifest)(raw0)).toThrow();
        expect(() => (0, load_1.parseProjectManifest)(raw1)).toThrow();
    });
    it('can validate a v0.2.0 project.yaml', async () => {
        const raw = await loadFromFile(path_1.default.join(projectsDir, 'project_0.2.0.yaml'));
        expect(() => (0, load_1.parseProjectManifest)(raw)).toBeTruthy();
    });
    it('can fail validation if version not supported', async () => {
        const raw = await loadFromFile(path_1.default.join(projectsDir, 'project_invalid_version.yaml'));
        expect(() => (0, load_1.parseProjectManifest)(raw)).toThrow();
    });
    it('can validate a v0.2.0 project.yaml with a custom data source', async () => {
        const raw = await loadFromFile(path_1.default.join(projectsDir, 'project_0.2.0_custom_ds.yaml'));
        expect(() => (0, load_1.parseProjectManifest)(raw)).not.toThrow();
    });
    it('can fail validation if custom ds missing processor', async () => {
        const raw = await loadFromFile(path_1.default.join(projectsDir, 'project_0.2.0_invalid_custom_ds.yaml'));
        expect(() => (0, load_1.parseProjectManifest)(raw)).toThrow();
    });
});
//# sourceMappingURL=project.spec.js.map