{"version":3,"file":"project.spec.js","sourceRoot":"","sources":["../../src/project/project.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {loadFromJsonOrYaml, parseProjectManifest} from './load';\n\nconst projectsDir = path.join(__dirname, '../../test');\n\nfunction loadFromFile(file: string): unknown {\n  let filePath = file;\n  if (fs.existsSync(file) && fs.lstatSync(file).isDirectory()) {\n    filePath = path.join(file, 'project.yaml');\n  }\n\n  return loadFromJsonOrYaml(filePath);\n}\n\ndescribe('project.yaml', () => {\n  it('can parse project.yaml to ProjectManifestImpl', async () => {\n    const raw = await loadFromFile(path.join(projectsDir, 'project.yaml'));\n    const project = parseProjectManifest(raw);\n    expect(project).toBeTruthy();\n  });\n\n  it('can validate project.yaml', async () => {\n    const raw0 = await loadFromFile(path.join(projectsDir, 'project_falsy.yaml'));\n    const raw1 = await loadFromFile(path.join(projectsDir, 'project_falsy_array.yaml'));\n    expect(() => parseProjectManifest(raw0)).toThrow();\n    expect(() => parseProjectManifest(raw1)).toThrow();\n  });\n\n  it('can validate a v0.2.0 project.yaml', async () => {\n    const raw = await loadFromFile(path.join(projectsDir, 'project_0.2.0.yaml'));\n    expect(() => parseProjectManifest(raw)).toBeTruthy();\n  });\n\n  it('can fail validation if version not supported', async () => {\n    const raw = await loadFromFile(path.join(projectsDir, 'project_invalid_version.yaml'));\n    expect(() => parseProjectManifest(raw)).toThrow();\n  });\n\n  it('can validate a v0.2.0 project.yaml with a custom data source', async () => {\n    const raw = await loadFromFile(path.join(projectsDir, 'project_0.2.0_custom_ds.yaml'));\n    expect(() => parseProjectManifest(raw)).not.toThrow();\n  });\n\n  it('can fail validation if custom ds missing processor', async () => {\n    const raw = await loadFromFile(path.join(projectsDir, 'project_0.2.0_invalid_custom_ds.yaml'));\n    expect(() => parseProjectManifest(raw)).toThrow();\n  });\n});\n"]}