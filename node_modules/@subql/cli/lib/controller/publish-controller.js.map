{"version":3,"file":"publish-controller.js","sourceRoot":"","sources":["../../src/controller/publish-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {parseProjectManifest, ReaderFactory, manifestIsV0_2_0} from '@subql/common';\nimport {FileReference} from '@subql/types';\nimport axios from 'axios';\nimport FormData from 'form-data';\nimport {IPFSHTTPClient, create} from 'ipfs-http-client';\nimport {IPFS_CLUSTER_ENDPOINT} from '../constants';\n\nexport async function uploadToIpfs(projectDir: string, authToken: string, ipfsEndpoint?: string): Promise<string> {\n  const reader = await ReaderFactory.create(projectDir);\n  const manifest = parseProjectManifest(await reader.getProjectSchema()).asImpl;\n\n  if (!manifestIsV0_2_0(manifest)) {\n    throw new Error('Unsupported project manifest spec, only 0.2.0 is supported');\n  }\n  let ipfs: IPFSHTTPClient;\n  if (ipfsEndpoint) {\n    ipfs = create({url: ipfsEndpoint});\n  }\n  const deployment = await replaceFileReferences(projectDir, manifest, authToken, ipfs);\n  // Upload schema\n  return uploadFile(deployment.toDeployment(), authToken, ipfs);\n}\n\n/* Recursively finds all FileReferences in an object and replaces the files with IPFS references */\nasync function replaceFileReferences<T>(\n  projectDir: string,\n  input: T,\n  authToken: string,\n  ipfs?: IPFSHTTPClient\n): Promise<T> {\n  if (Array.isArray(input)) {\n    return (await Promise.all(\n      input.map((val) => replaceFileReferences(projectDir, val, authToken, ipfs))\n    )) as unknown as T;\n  } else if (typeof input === 'object') {\n    if (input instanceof Map) {\n      input = mapToObject(input) as T;\n    }\n    if (isFileReference(input)) {\n      input.file = await uploadFile(fs.createReadStream(path.resolve(projectDir, input.file)), authToken, ipfs).then(\n        (cid) => `ipfs://${cid}`\n      );\n    }\n    const keys = Object.keys(input) as unknown as (keyof T)[];\n    await Promise.all(\n      keys.map(async (key) => {\n        input[key] = await replaceFileReferences(projectDir, input[key], authToken, ipfs);\n      })\n    );\n  }\n\n  return input;\n}\n\nexport async function uploadFile(\n  content: string | fs.ReadStream,\n  authToken: string,\n  ipfs?: IPFSHTTPClient\n): Promise<string> {\n  let ipfsClientCid: string;\n  // if user provide ipfs, we will try to upload it to this gateway\n  if (ipfs) {\n    try {\n      ipfsClientCid = (await ipfs.add(content, {pin: true, cidVersion: 0})).cid.toString();\n    } catch (e) {\n      throw new Error(`Publish project to provided IPFS gateway failed, ${e}`);\n    }\n  }\n  let ipfsClusterCid: string;\n  try {\n    ipfsClusterCid = await UploadFileByCluster(\n      determineStringOrFsStream(content) ? await fs.promises.readFile(content.path, 'utf8') : content,\n      authToken\n    );\n  } catch (e) {\n    throw new Error(`Publish project to default cluster failed, ${e}`);\n  }\n  // Validate IPFS cid\n  if (ipfsClientCid && ipfsClientCid !== ipfsClusterCid) {\n    throw new Error(`Published and received IPFS cid not identical \\n, \n    IPFS gateway: ${ipfsClientCid}, IPFS cluster: ${ipfsClusterCid}`);\n  }\n  return ipfsClusterCid;\n}\n\nfunction determineStringOrFsStream(toBeDetermined: unknown): toBeDetermined is fs.ReadStream {\n  return !!(toBeDetermined as fs.ReadStream).path;\n}\n\nasync function UploadFileByCluster(content: string, authToken: string): Promise<string> {\n  const bodyFormData = new FormData();\n  bodyFormData.append('data', content);\n  const result = (\n    await axios({\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        'Content-Type': 'multipart/form-data',\n        ...bodyFormData.getHeaders(),\n      },\n      method: 'post',\n      url: IPFS_CLUSTER_ENDPOINT,\n      data: bodyFormData,\n    })\n  ).data as ClusterResponseData;\n  return result.cid?.['/'];\n}\n\nfunction mapToObject(map: Map<string | number, unknown>): Record<string | number, unknown> {\n  // XXX can use Object.entries with newer versions of node.js\n  const assetsObj: Record<string, unknown> = {};\n  for (const key of map.keys()) {\n    assetsObj[key] = map.get(key);\n  }\n  return assetsObj;\n}\n\nfunction isFileReference(value: any): value is FileReference {\n  return value.file && typeof value.file === 'string';\n}\n\ninterface ClusterResponseData {\n  name: string;\n  cid: cidSpec;\n  size: number;\n}\n// cluster response cid stored as {'/': 'QmVq2bqunmkmEmMCY3x9U9kDcgoRBGRbuBm5j7XKZDvSYt'}\ninterface cidSpec {\n  '/': string;\n}\n"]}