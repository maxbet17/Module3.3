{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../src/commands/publish.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,2BAAuD;AACvD,6DAAwB;AACxB,sCAA2C;AAC3C,yEAA8D;AAC9D,iEAA4B;AAE5B,MAAM,iBAAiB,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,2BAA2B,CAAC,CAAC;AAEtF,MAAqB,OAAQ,SAAQ,cAAO;IAQ1C,KAAK,CAAC,GAAG;;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE1C,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QAEhF,IAAI,CAAC,IAAA,cAAS,EAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;SAC5D;QAED,mCAAmC;QACnC,IAAI;YACF,MAAM,eAAK,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;SAC5C;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;SACvC;QAED,IAAI,SAAiB,CAAC;QAEtB,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE;YAClC,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;SAC5C;aAAM,IAAI,IAAA,eAAU,EAAC,iBAAiB,CAAC,EAAE;YACxC,IAAI;gBACF,SAAS,GAAG,MAAA,OAAO,CAAC,GAAG,CAAC,kBAAkB,mCAAI,IAAA,iBAAY,EAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;aACvF;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,KAAK,CAAC,0CAA0C,iBAAiB,KAAK,CAAC,EAAE,CAAC,CAAC;aACjF;SACF;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;SAChE;QAED,IAAI,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG,MAAM,IAAA,iCAAY,EAAC,SAAS,EAAE,SAAS,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACpG,IAAI,CAAC,GAAG,CAAC,sCAAsC,GAAG,EAAE,CAAC,CAAC;IACxD,CAAC;;AA1CH,0BA2CC;AA1CQ,mBAAW,GAAG,sCAAsC,CAAC;AAErD,aAAK,GAAG;IACb,QAAQ,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,cAAc,EAAC,CAAC;IAChE,IAAI,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,WAAW,EAAE,uBAAuB,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;CAC5E,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {lstatSync, readFileSync, existsSync} from 'fs';\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport {uploadToIpfs} from '../controller/publish-controller';\nimport Build from './build';\n\nconst ACCESS_TOKEN_PATH = path.resolve(process.env.HOME, '.subql/SUBQL_ACCESS_TOKEN');\n\nexport default class Publish extends Command {\n  static description = 'Upload this SubQuery project to IPFS';\n\n  static flags = {\n    location: Flags.string({char: 'l', description: 'local folder'}),\n    ipfs: Flags.string({description: 'IPFS gateway endpoint', required: false}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Publish);\n\n    const directory = flags.location ? path.resolve(flags.location) : process.cwd();\n\n    if (!lstatSync(directory).isDirectory()) {\n      this.error('Argument `location` is not a valid directory');\n    }\n\n    // Ensure that the project is built\n    try {\n      await Build.run(['--location', directory]);\n    } catch (e) {\n      this.log(e);\n      this.error('Failed to build project');\n    }\n\n    let authToken: string;\n\n    if (process.env.SUBQL_ACCESS_TOKEN) {\n      authToken = process.env.SUBQL_ACCESS_TOKEN;\n    } else if (existsSync(ACCESS_TOKEN_PATH)) {\n      try {\n        authToken = process.env.SUBQL_ACCESS_TOKEN ?? readFileSync(ACCESS_TOKEN_PATH, 'utf8');\n      } catch (e) {\n        this.error(`Failed to read SUBQL_ACCESS_TOKEN from ${ACCESS_TOKEN_PATH}: ${e}`);\n      }\n    } else {\n      this.error('Please provide SUBQL_ACCESS_TOKEN before publish');\n    }\n\n    this.log('Uploading SupQuery project to IPFS');\n    const cid = await uploadToIpfs(directory, authToken.trim(), flags.ipfs).catch((e) => this.error(e));\n    this.log(`SubQuery Project uploaded to IPFS: ${cid}`);\n  }\n}\n"]}